# app.py ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∏–π Streamlit‚Äë–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
# -------------------------------------------------------------
# –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚Äë–∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ
# –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ
# –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏
# –≤—ã–∑–æ–≤—ã FastAPI‚Äë—ç–Ω–¥–ø–æ–π–Ω—Ç–æ–≤.
# -------------------------------------------------------------

import streamlit as st
import requests
import db

BACKEND_URL = "http://localhost:8000"  # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# ----------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
# ----------------------------------------

def post(endpoint: str, data=None, files=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ POST‚Äë–∑–∞–ø—Ä–æ—Å–∞ –∫ backend. –°–µ–π—á–∞—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ."""
    try:
        res = requests.post(f"{BACKEND_URL}{endpoint}", data=data, files=files, timeout=30)
        res.raise_for_status()
        return res.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ backend: {e}")
        return None

# ----------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
# ----------------------------------------

if "data" not in st.session_state:
    st.session_state.data = {}

if "user_id" not in st.session_state:
    st.session_state.user_id = None
if "show_registration" not in st.session_state:
    st.session_state.show_registration = False


def show_login():
    st.title("–í—Ö–æ–¥")
    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        user_id = db.authenticate_user(username, password)
        if user_id:
            st.session_state.user_id = user_id
            st.experimental_rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    if st.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
        st.session_state.show_registration = True
        st.experimental_rerun()


def show_registration():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–õ–æ–≥–∏–Ω", key="reg_user")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pass")
    if st.button("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"):
        try:
            user_id = db.register_user(username, password)
            st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. –í–æ–π–¥–∏—Ç–µ.")
            st.session_state.show_registration = False
            st.experimental_rerun()
        except ValueError as e:
            st.error(str(e))
    if st.button("–ù–∞–∑–∞–¥"):
        st.session_state.show_registration = False
        st.experimental_rerun()


if st.session_state.user_id is None:
    if st.session_state.show_registration:
        show_registration()
    else:
        show_login()
    st.stop()

# ----------------------------------------
# –ù–∞–≤–∏–≥–∞—Ü–∏—è (sidebar)
# ----------------------------------------

page = st.sidebar.radio(
    "–†–∞–∑–¥–µ–ª—ã –∞–Ω–∫–µ—Ç—ã", [
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
        "–ù–∞–≤—ã–∫–∏ –∏ —è–∑—ã–∫–∏",
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ",
    ]
)

# ----------------------------------------
# 1. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# ----------------------------------------

if page == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
    st.title("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    saved = db.load_personal_info(st.session_state.user_id)
    default_name = saved[0] if saved else ""
    default_email = saved[1] if saved else ""
    default_phone = saved[2] if saved else ""
    saved_photo = saved[3] if saved else None

    st.session_state.data.update({"name": default_name, "email": default_email, "phone": default_phone})

    name = st.text_input("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è", default_name)
    email = st.text_input("Email", default_email)
    phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", default_phone)
    photo = st.file_uploader("–§–æ—Ç–æ (JPG/PNG)", type=["jpg", "jpeg", "png"])

    if saved_photo and not photo:
        st.image(saved_photo, caption="–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        photo_bytes = photo.read() if photo else saved_photo
        db.save_personal_info(st.session_state.user_id, name, email, phone, photo_bytes)
        st.session_state.data.update({"name": name, "email": email, "phone": phone})
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤–∫–ª–∞–¥–∫–µ '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'.")

# ----------------------------------------
# 2. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
# ----------------------------------------

elif page == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
    st.title("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –¥–∏–ø–ª–æ–º—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")

    doc = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç", key="edu_upload")
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key="edu_save") and doc:
        db.save_document(doc, st.session_state.user_id)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    docs = db.list_documents(st.session_state.user_id)
    if docs:
        st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        for _id, name in docs:
            st.write(f"{_id}. {name}")

# ----------------------------------------
# 3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
# ----------------------------------------

elif page == "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã":
    st.title("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

    doc = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç", key="exp_upload")
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key="exp_save") and doc:
        db.save_document(doc, st.session_state.user_id)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    docs = db.list_documents(st.session_state.user_id)
    if docs:
        st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        for _id, name in docs:
            st.write(f"{_id}. {name}")

# ----------------------------------------
# 4. –ù–∞–≤—ã–∫–∏ –∏ —è–∑—ã–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
# ----------------------------------------

elif page == "–ù–∞–≤—ã–∫–∏ –∏ —è–∑—ã–∫–∏":
    st.title("üõ†Ô∏è –ù–∞–≤—ã–∫–∏ –∏ üåç –Ø–∑—ã–∫–∏")
    st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–∞–≤—ã–∫–æ–≤ –∏ —è–∑—ã–∫–æ–≤.")

# ----------------------------------------
# 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ (–∑–∞–≥–ª—É—à–∫–∞)
# ----------------------------------------

elif page == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ":
    st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ")
    st.write("–ß–µ—Ä–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö:")
    st.json(st.session_state.data)
    st.warning("Backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
