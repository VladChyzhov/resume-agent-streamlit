import streamlit as st
import db

if st.session_state.get("user_id") is None:
    st.switch_page("pages/0_Auth.py")

st.title("üõ†Ô∏è –ù–∞–≤—ã–∫–∏ –∏ üåç –Ø–∑—ã–∫–∏")

# Create two columns for skills and languages
col1, col2 = st.columns(2)

with col1:
    st.subheader("üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏")
    
    # Add new skill form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫", expanded=False):
        skill_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞", key="skill_name", help="–ù–∞–ø—Ä–∏–º–µ—Ä: Python, JavaScript, Photoshop")
        skill_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è", 
                                 ["beginner", "intermediate", "advanced", "expert"], 
                                 key="skill_level",
                                 format_func=lambda x: {
                                     "beginner": "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                                     "intermediate": "–°—Ä–µ–¥–Ω–∏–π", 
                                     "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                                     "expert": "–≠–∫—Å–ø–µ—Ä—Ç"
                                 }[x])
        skill_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                                    ["technical", "creative", "management", "communication"], 
                                    key="skill_category",
                                    format_func=lambda x: {
                                        "technical": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",
                                        "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ",
                                        "management": "–£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ", 
                                        "communication": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
                                    }[x])
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫", key="add_skill"):
            if skill_name.strip():
                if db.save_skill(st.session_state.user_id, skill_name, skill_level, skill_category):
                    st.success(f"–ù–∞–≤—ã–∫ '{skill_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞")
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞")
    
    # Display existing skills
    skills = db.list_skills(st.session_state.user_id)
    if skills:
        st.subheader("üìù –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏")
        
        # Group by category
        skill_categories = {}
        for skill_id, skill_name, skill_level, category in skills:
            if category not in skill_categories:
                skill_categories[category] = []
            skill_categories[category].append((skill_id, skill_name, skill_level))
        
        for category, category_skills in skill_categories.items():
            category_name = {
                "technical": "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",
                "creative": "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ", 
                "management": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ",
                "communication": "üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
            }.get(category, f"üìÇ {category}")
            
            st.write(f"**{category_name}:**")
            for skill_id, skill_name, skill_level in category_skills:
                level_emoji = {
                    "beginner": "‚≠ê", 
                    "intermediate": "‚≠ê‚≠ê",
                    "advanced": "‚≠ê‚≠ê‚≠ê", 
                    "expert": "‚≠ê‚≠ê‚≠ê‚≠ê"
                }.get(skill_level, "‚≠ê")
                
                col_skill, col_delete = st.columns([4, 1])
                with col_skill:
                    st.write(f"‚Ä¢ {skill_name} {level_emoji}")
                with col_delete:
                    if st.button("üóëÔ∏è", key=f"del_skill_{skill_id}", help="–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫"):
                        if db.delete_skill(skill_id, st.session_state.user_id):
                            st.success("–ù–∞–≤—ã–∫ —É–¥–∞–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    else:
        st.info("–ù–∞–≤—ã–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

with col2:
    st.subheader("üåç –Ø–∑—ã–∫–∏")
    
    # Add new language form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫", expanded=False):
        language_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞", key="language_name", help="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –ò—Å–ø–∞–Ω—Å–∫–∏–π")
        language_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è", 
                                    ["A1", "A2", "B1", "B2", "C1", "C2"], 
                                    key="language_level",
                                    help="–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π CEFR")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫", key="add_language"):
            if language_name.strip():
                if db.save_language(st.session_state.user_id, language_name, language_level):
                    st.success(f"–Ø–∑—ã–∫ '{language_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞")
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞")
    
    # Display existing languages
    languages = db.list_languages(st.session_state.user_id)
    if languages:
        st.subheader("üìù –í–∞—à–∏ —è–∑—ã–∫–∏")
        for language_id, language_name, proficiency_level in languages:
            col_lang, col_delete = st.columns([4, 1])
            with col_lang:
                st.write(f"‚Ä¢ **{language_name}** - {proficiency_level}")
            with col_delete:
                if st.button("üóëÔ∏è", key=f"del_lang_{language_id}", help="–£–¥–∞–ª–∏—Ç—å —è–∑—ã–∫"):
                    if db.delete_language(language_id, st.session_state.user_id):
                        st.success("–Ø–∑—ã–∫ —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    else:
        st.info("–Ø–∑—ã–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

# Save to session state for resume generation
if skills or languages:
    st.session_state.data.update({
        "skills": skills,
        "languages": languages
    })

# Navigation help
st.divider()
st.info("üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏ —è–∑—ã–∫–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

# Quick stats
if skills or languages:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col_stat1, col_stat2 = st.columns(2)
    with col_stat1:
        st.metric("–ù–∞–≤—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ", len(skills))
    with col_stat2:
        st.metric("–Ø–∑—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ", len(languages))
