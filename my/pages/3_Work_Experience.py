import streamlit as st
import db

if st.session_state.get("user_id") is None:
    st.switch_page("pages/0_Auth.py")

st.title("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

# File upload section
st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –æ —Ä–∞–±–æ—Ç–µ", expanded=True):
    doc = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", 
        key="exp_upload",
        type=["pdf", "jpg", "jpeg", "png", "doc", "docx"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG, DOC, DOCX"
    )
    
    # Document type selection
    doc_type = st.selectbox(
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        ["employment_certificate", "recommendation", "contract", "portfolio", "other"],
        format_func=lambda x: {
            "employment_certificate": "üìã –°–ø—Ä–∞–≤–∫–∞ –æ —Ä–∞–±–æ—Ç–µ",
            "recommendation": "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", 
            "contract": "üìÑ –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä",
            "portfolio": "üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ/–û–±—Ä–∞–∑—Ü—ã —Ä–∞–±–æ—Ç",
            "other": "üìÑ –î—Ä—É–≥–æ–µ"
        }[x],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key="exp_save", type="primary"):
        if doc:
            # File size validation (max 10MB)
            if doc.size > 10 * 1024 * 1024:
                st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB")
            else:
                if db.save_document(doc, st.session_state.user_id, f"work_{doc_type}"):
                    st.success(f"–î–æ–∫—É–º–µ–Ω—Ç '{doc.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        else:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

# Display existing documents
st.subheader("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

# Get all work-related documents
work_docs = []
for category in ["work_employment_certificate", "work_recommendation", "work_contract", "work_portfolio", "work_other"]:
    docs = db.list_documents(st.session_state.user_id, category)
    work_docs.extend(docs)

if work_docs:
    # Group documents by type
    doc_groups = {
        "work_employment_certificate": [],
        "work_recommendation": [], 
        "work_contract": [],
        "work_portfolio": [],
        "work_other": []
    }
    
    for doc_id, filename, category in work_docs:
        if category in doc_groups:
            doc_groups[category].append((doc_id, filename))
    
    # Display grouped documents
    for category, docs in doc_groups.items():
        if docs:
            category_name = {
                "work_employment_certificate": "üìã –°–ø—Ä–∞–≤–∫–∏ –æ —Ä–∞–±–æ—Ç–µ",
                "work_recommendation": "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞",
                "work_contract": "üìÑ –¢—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã", 
                "work_portfolio": "üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ/–û–±—Ä–∞–∑—Ü—ã —Ä–∞–±–æ—Ç",
                "work_other": "üìÑ –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }[category]
            
            st.write(f"**{category_name}:**")
            for doc_id, filename in docs:
                col_doc, col_info = st.columns([3, 1])
                with col_doc:
                    st.write(f"‚Ä¢ {filename}")
                with col_info:
                    st.caption(f"ID: {doc_id}")
            st.write("")  # Add spacing
    
    # Save document info to session state
    st.session_state.data.update({
        "work_documents": len(work_docs),
        "work_doc_details": work_docs
    })
else:
    st.info("üìù –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

# Work experience information form
st.subheader("üíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã")

with st.expander("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ", expanded=False):
    company = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", help="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
    position = st.text_input("–î–æ–ª–∂–Ω–æ—Å—Ç—å", help="–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    col_start, col_end = st.columns(2)
    with col_start:
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    with col_end:
        is_current = st.checkbox("–†–∞–±–æ—Ç–∞—é –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è")
        if not is_current:
            end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        else:
            end_date = None
    
    responsibilities = st.text_area(
        "–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
        height=100,
        help="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
    )
    
    technologies = st.text_input(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
        help="–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Excel, CRM —Å–∏—Å—Ç–µ–º—ã"
    )
    
    company_description = st.text_input(
        "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∫—Ä–∞—Ç–∫–æ)", 
        help="–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
    )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ"):
        work_info = {
            "company": company,
            "position": position,
            "start_date": start_date.isoformat() if start_date else None,
            "end_date": end_date.isoformat() if end_date else None,
            "is_current": is_current,
            "responsibilities": responsibilities,
            "technologies": technologies,
            "company_description": company_description
        }
        
        # Save to session state (in a real app, this would go to database)
        if "work_experience" not in st.session_state.data:
            st.session_state.data["work_experience"] = []
        st.session_state.data["work_experience"].append(work_info)
        
        st.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# Display saved work experience
if "work_experience" in st.session_state.data and st.session_state.data["work_experience"]:
    st.subheader("üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    
    for i, work in enumerate(st.session_state.data["work_experience"]):
        with st.expander(f"{work['position']} –≤ {work['company']}", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**–ö–æ–º–ø–∞–Ω–∏—è:** {work['company']}")
                st.write(f"**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {work['position']}")
            with col2:
                start = work['start_date'] if work['start_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                end = work['end_date'] if work['end_date'] else ("–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" if work['is_current'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                st.write(f"**–ü–µ—Ä–∏–æ–¥:** {start} - {end}")
                if work['company_description']:
                    st.write(f"**–û –∫–æ–º–ø–∞–Ω–∏–∏:** {work['company_description']}")
            
            if work['responsibilities']:
                st.write(f"**–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**")
                st.write(work['responsibilities'])
            
            if work['technologies']:
                st.write(f"**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** {work['technologies']}")
            
            if st.button(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {i+1}", key=f"delete_work_{i}"):
                st.session_state.data["work_experience"].pop(i)
                st.rerun()

# Navigation help
st.divider()
st.info("üí° –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–∞–∑–¥–µ–ª—É '–ù–∞–≤—ã–∫–∏ –∏ —è–∑—ã–∫–∏' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

# Quick stats
col1, col2 = st.columns(2)
with col1:
    st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", len(work_docs))
with col2:
    work_count = len(st.session_state.data.get("work_experience", []))
    st.metric("–ú–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–æ", work_count)
