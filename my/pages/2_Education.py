import streamlit as st
import db

if st.session_state.get("user_id") is None:
    st.switch_page("pages/0_Auth.py")

st.title("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –¥–∏–ø–ª–æ–º—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")

# File upload section
st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏", expanded=True):
    doc = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", 
        key="edu_upload",
        type=["pdf", "jpg", "jpeg", "png", "doc", "docx"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, PNG, DOC, DOCX"
    )
    
    # Document type selection
    doc_type = st.selectbox(
        "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        ["diploma", "certificate", "transcript", "other"],
        format_func=lambda x: {
            "diploma": "üéì –î–∏–ø–ª–æ–º",
            "certificate": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", 
            "transcript": "üìã –°–ø—Ä–∞–≤–∫–∞/–í—ã–ø–∏—Å–∫–∞",
            "other": "üìÑ –î—Ä—É–≥–æ–µ"
        }[x],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", key="edu_save", type="primary"):
        if doc:
            # File size validation (max 10MB)
            if doc.size > 10 * 1024 * 1024:
                st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB")
            else:
                if db.save_document(doc, st.session_state.user_id, f"education_{doc_type}"):
                    st.success(f"–î–æ–∫—É–º–µ–Ω—Ç '{doc.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        else:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

# Display existing documents
st.subheader("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

# Get all education-related documents
education_docs = []
for category in ["education_diploma", "education_certificate", "education_transcript", "education_other"]:
    docs = db.list_documents(st.session_state.user_id, category)
    education_docs.extend(docs)

if education_docs:
    # Group documents by type
    doc_groups = {
        "education_diploma": [],
        "education_certificate": [], 
        "education_transcript": [],
        "education_other": []
    }
    
    for doc_id, filename, category in education_docs:
        if category in doc_groups:
            doc_groups[category].append((doc_id, filename))
    
    # Display grouped documents
    for category, docs in doc_groups.items():
        if docs:
            category_name = {
                "education_diploma": "üéì –î–∏–ø–ª–æ–º—ã",
                "education_certificate": "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
                "education_transcript": "üìã –°–ø—Ä–∞–≤–∫–∏/–í—ã–ø–∏—Å–∫–∏", 
                "education_other": "üìÑ –î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            }[category]
            
            st.write(f"**{category_name}:**")
            for doc_id, filename in docs:
                col_doc, col_info = st.columns([3, 1])
                with col_doc:
                    st.write(f"‚Ä¢ {filename}")
                with col_info:
                    st.caption(f"ID: {doc_id}")
            st.write("")  # Add spacing
    
    # Save document info to session state
    st.session_state.data.update({
        "education_documents": len(education_docs),
        "education_doc_details": education_docs
    })
else:
    st.info("üìù –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

# Additional education information form
st.subheader("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏")

with st.expander("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", expanded=False):
    institution = st.text_input("–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ", help="–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, –∫–æ–ª–ª–µ–¥–∂–∞ –∏–ª–∏ —à–∫–æ–ª—ã")
    degree = st.text_input("–°—Ç–µ–ø–µ–Ω—å/–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", help="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∫–∞–ª–∞–≤—Ä, –ú–∞–≥–∏—Å—Ç—Ä, –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
    field = st.text_input("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", help="–û–±–ª–∞—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
    
    col_start, col_end = st.columns(2)
    with col_start:
        start_year = st.number_input("–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", min_value=1950, max_value=2030, value=2020)
    with col_end:
        end_year = st.number_input("–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è", min_value=1950, max_value=2030, value=2024)
    
    gpa = st.text_input("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)", help="–ù–∞–ø—Ä–∏–º–µ—Ä: 4.5/5.0 –∏–ª–∏ –æ—Ç–ª–∏—á–Ω–æ")
    honors = st.text_input("–ù–∞–≥—Ä–∞–¥—ã/–û—Ç–ª–∏—á–∏—è", help="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º, —Å—Ç–∏–ø–µ–Ω–¥–∏—è")
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"):
        education_info = {
            "institution": institution,
            "degree": degree, 
            "field": field,
            "start_year": start_year,
            "end_year": end_year,
            "gpa": gpa,
            "honors": honors
        }
        
        # Save to session state (in a real app, this would go to database)
        if "education_info" not in st.session_state.data:
            st.session_state.data["education_info"] = []
        st.session_state.data["education_info"].append(education_info)
        
        st.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# Navigation help
st.divider()
st.info("üí° –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–∞–∑–¥–µ–ª—É '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

# Quick stats
if education_docs:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", len(education_docs))
